// Code generated by hertz generator.

package manager

import (
	"context"

	"github.com/XZ0730/hertz-scaffold/biz/model/base"
	manager "github.com/XZ0730/hertz-scaffold/biz/model/manager"
	"github.com/XZ0730/hertz-scaffold/biz/pack"
	"github.com/XZ0730/hertz-scaffold/biz/service"
	"github.com/XZ0730/hertz-scaffold/pkg/errno"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// GetGarageParkSpace .
// @router /auth/manager/parkspace [GET]
func GetGarageParkSpace(_ context.Context, c *app.RequestContext) {
	var err error
	var req manager.GetParkSpaceReq
	err = c.BindAndValidate(&req)
	resp := new(manager.GetParkSpaceResponse)
	if err != nil {
		pack.PackGarageParkSpace(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, "-1", nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg, psm := service.NewManagerService().GetGarageParkSpace(req.GetGarageID())
	pack.PackGarageParkSpace(resp, code, msg, req.GetGarageID(), psm)
	c.JSON(consts.StatusOK, resp)
}

// GetParkRecordList .
// @router /auth/manager/park_record [GET]
func GetParkRecordList(_ context.Context, c *app.RequestContext) {
	var err error
	var req manager.GetParkRecordReq
	resp := new(manager.GetParkRecordListResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackParkRecord(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, "", nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg, prm := service.NewManagerService().GetParkRecordByTime(&req)
	pack.PackParkRecord(resp, code, msg, req.GetGarageID(), prm)
	c.JSON(consts.StatusOK, resp)
}

// CntVolume .
// @router /auth/manager/cnt_volume [GET]
func CntVolume(_ context.Context, c *app.RequestContext) {
	var err error
	var req manager.CntVolumeReq
	resp := new(manager.CntVolumeResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackCntVolume(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg, cnts := service.NewManagerService().CntVolume(req.GetGarageID())
	pack.PackCntVolume(resp, code, msg, cnts)
	c.JSON(consts.StatusOK, resp)
}

// GetVehicleAudit .
// @router /auth/manager/vehicle_audit [GET]
func GetVehicleAudit(_ context.Context, c *app.RequestContext) {
	var err error
	var req manager.GetVehicleAuditReq
	resp := new(manager.GetVehicleAuditResp)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackVehicleAudit(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg, nil)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg, vam := service.NewManagerService().GetVehicleAudit(req.GetGarageID())
	pack.PackVehicleAudit(resp, code, msg, vam)
	c.JSON(consts.StatusOK, resp)
}

// AuditVehicle .
// @router /auth/manager/vehicle_audit [POST]
func AuditVehicle(_ context.Context, c *app.RequestContext) {
	var err error
	var req manager.AuditVehicleReq
	resp := new(base.BaseResponse)
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.PackBase(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg)
		c.JSON(consts.StatusOK, resp)
		return
	}
	if req.GetIsAudit() != 1 && req.GetIsAudit() != 2 {
		pack.PackBase(resp, errno.ParamError.ErrorCode, errno.ParamError.ErrorMsg)
		c.JSON(consts.StatusOK, resp)
		return
	}
	code, msg := service.NewManagerService().AuditVehicle(req.GetAid(), req.GetIsAudit())
	pack.PackBase(resp, code, msg)
	c.JSON(consts.StatusOK, resp)
}
